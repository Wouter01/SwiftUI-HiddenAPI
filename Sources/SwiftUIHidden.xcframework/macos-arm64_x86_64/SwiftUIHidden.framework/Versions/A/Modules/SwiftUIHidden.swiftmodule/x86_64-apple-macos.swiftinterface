// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-macos12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftUIHidden
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Swift
import SwiftUI
@_exported import SwiftUIHidden
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftUI.View {
  public var hidden: SwiftUIHidden.HiddenViewModifier<Self> {
    get
  }
}
public enum FullScreenToolbarBehavior {
  case showsWithWindow, showsWithMenuBar, automatic
  public static func == (a: SwiftUIHidden.FullScreenToolbarBehavior, b: SwiftUIHidden.FullScreenToolbarBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ListAccessoryVisibility {
  case always, editing, automatic
  public static func == (a: SwiftUIHidden.ListAccessoryVisibility, b: SwiftUIHidden.ListAccessoryVisibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HiddenViewModifier<Content> where Content : SwiftUI.View {
  public func fullScreenToolbarBehavior(_ behavior: SwiftUIHidden.FullScreenToolbarBehavior) -> some SwiftUI.View
  
  public func formInsets(_ edges: SwiftUI.Edge.Set, _ value: CoreFoundation.CGFloat) -> some SwiftUI.View
  
  public func formInsets(_ edges: SwiftUI.Edge.Set, _ value: SwiftUI.EdgeInsets) -> some SwiftUI.View
  
  public func onReselect(enabled: Swift.Bool, perform: (() -> ())?) -> some SwiftUI.View
  
  public func variableBlur(maxRadius: CoreFoundation.CGFloat, mask: SwiftUI.Image, opaque: Swift.Bool) -> some SwiftUI.View
  
  public func formBackground<S>(_ shape: S?) -> some SwiftUI.View where S : SwiftUI.ShapeStyle
  
  public func formRowBackground<S>(_ shape: S?) -> some SwiftUI.View where S : SwiftUI.ShapeStyle
  
  public func formInfoAction(action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  public func sectionBackground(_ visibility: SwiftUI.Visibility) -> some SwiftUI.View
  
  public func formRowInfoVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.View
  
  public func formRowIndentationLevel(_ level: Swift.Int?) -> some SwiftUI.View
  
  public func formAccessory(@SwiftUI.ViewBuilder accessories: () -> some View) -> some SwiftUI.View
  
  public func formRowInsets(_ insets: SwiftUI.EdgeInsets?) -> some SwiftUI.View
  
  public func formAccessoryVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.View
  
  public func listReorderControlVisibility(_ visibility: SwiftUIHidden.ListAccessoryVisibility) -> some SwiftUI.View
  
  public func bottomBar(@SwiftUI.ViewBuilder content: () -> some View) -> some SwiftUI.View
  
  public func accessoryBar(@SwiftUI.ViewBuilder content: () -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.Form {
  public static func withFooter<C, F>(@SwiftUI.ViewBuilder content: () -> C, @SwiftUI.ViewBuilder footer: () -> F) -> some SwiftUI.View where C : SwiftUI.View, F : SwiftUI.View
  
}
extension SwiftUI.Scene {
  public var hidden: SwiftUIHidden.HiddenSceneModifier<Self> {
    get
  }
}
public struct HiddenSceneModifier<S> where S : SwiftUI.Scene {
  public func windowBackground(_ shape: some ShapeStyle) -> some SwiftUI.Scene
  
  public func defaultVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.Scene
  
  public func windowShouldClose(_ perform: @escaping () -> Swift.Bool) -> some SwiftUI.Scene
  
}
public enum AppActions {
  public static func openSettings()
  @available(macOS 13.0, *)
  public static func openWindow(id: Swift.String)
  @available(macOS 13.0, *)
  public static func openWindow<Value>(id: Swift.String, value: Value) where Value : Swift.Decodable, Value : Swift.Encodable, Value : Swift.Hashable
  @available(macOS 13.0, *)
  public static func openWindow<Value>(value: Value) where Value : Swift.Decodable, Value : Swift.Encodable, Value : Swift.Hashable
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 13.0, *)
  public static func openDocument(at url: Foundation.URL) async throws
  #endif
  public static func openURL(_ url: Foundation.URL)
  #if compiler(>=5.3) && $AsyncAwait
  public static func openURL(_ url: Foundation.URL) async -> Swift.Bool
  #endif
}
public struct HiddenWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public var floating: some SwiftUI.WindowStyle {
    get
  }
}
extension SwiftUI.WindowStyle where Self == SwiftUIHidden.HiddenWindowStyle {
  public static var hidden: SwiftUIHidden.HiddenWindowStyle {
    get
  }
}
extension SwiftUI.EnvironmentValues {
  public var hidden: SwiftUIHidden.HiddenEnvironmentValues {
    get
  }
}
public struct WithCurrentWindowAction {
  public func callAsFunction(_ window: (AppKit.NSWindow?) -> Swift.Void)
}
public struct HiddenEnvironmentValues {
  public var openSettings: () -> Swift.Void {
    get
  }
  public var withCurrentWindow: SwiftUIHidden.WithCurrentWindowAction {
    get
  }
}
extension SwiftUIHidden.FullScreenToolbarBehavior : Swift.Equatable {}
extension SwiftUIHidden.FullScreenToolbarBehavior : Swift.Hashable {}
extension SwiftUIHidden.ListAccessoryVisibility : Swift.Equatable {}
extension SwiftUIHidden.ListAccessoryVisibility : Swift.Hashable {}
